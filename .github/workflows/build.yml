# This is a basic workflow to help you get started with Actions
name: Test build

# Controls when the action will run. Triggers the workflow on push
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  release:
    # tags:
    # - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  clang-format:
    name: Formatting Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        path:
          - 'inc'
          - 'src'
          - 'examples'
          - 'tests'
    steps:
    - uses: actions/checkout@v2
    - name: Run clang-format style check for C/C++ programs.
      uses: jidicula/clang-format-action@v4.9.0
      with:
        clang-format-version: 14
        check-path: ${{ matrix.path }}
        fallback-style: 'Mozilla' # optional

  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    name: ${{ matrix.compiler }} c++${{ matrix.std }} cmake-${{ matrix.cmake-version }} root-${{ matrix.root-version }}

    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
        build_type: [ Release ]
        compiler: [ gcc-8, gcc-latest, clang-8, clang-latest ]
        cmake-version: [ 3.15, '' ]
        root-version: [ 5.34.38, 6.24.06, 6.26.06 ]
        std: [ 11, 14, 17, 20 ]
        exclude:
        - root-version: 5.34.38
          std: 17
        - root-version: 5.34.38
          std: 20
        - root-version: 6.24.06
          std: 20
        - root-version: 6.26.06
          std: 11

    runs-on: ${{ matrix.os }}

    steps:
    - name: Print env
      run: |
        echo github.event.action: ${{ github.event.action }}
        echo github.event_name: ${{ github.event_name }}

    - name: Setup compiler
      id: setup_cc
      uses: rlalik/setup-cpp-compiler@v1.1
      with:
        compiler: ${{ matrix.compiler }}

    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@v1.12
      with:
        cmake-version: ${{ matrix.cmake-version }}

    - name: Install common dependencies
      run: |
        sudo apt update
        sudo apt install libgtest-dev lcov rapidjson-dev libcurl4-openssl-dev -y
        sudo apt install python3-numpy libtbb-dev libxxhash0 -y
        wget http://gccb.if.uj.edu.pl/code/root-cpp${{ matrix.std }}_${{ matrix.root-version }}_amd64.deb
        sudo dpkg -i root-cpp${{ matrix.std }}_${{ matrix.root-version }}_amd64.deb

    - name: Checkout repository
      uses: actions/checkout@v1
      with:
        submodules: recursive

    - name: Configure
      shell: bash
      env:
        CC: ${{ steps.setup_cc.outputs.cc }}
        CXX: ${{ steps.setup_cc.outputs.cxx }}
      run: |
        . /etc/profile
        cmake --version
        root-config --version
        root-config --cflags
        root-config --features
        cmake \
          -S . \
          -B build \
          -DENABLE_TESTING=On \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCMAKE_INSTALL_PREFIX:PATH=instdir \
          ${{ matrix.root-version.cmake_args }}

    - name: Build
      shell: bash
      run: cmake --build build --config ${{ matrix.build_type }}

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Test
      shell: bash
      run: cmake --build build --target test
    - name: Coveralls Parallel
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.github_token }}
        flag-name: run-${{ matrix.compiler }}-c++${{ matrix.std }}-cmake-${{ matrix.cmake-version }}-root-${{ matrix.root-version }}
        parallel: true

  finish:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - name: Coveralls Finished
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.github_token }}
        parallel-finished: true
